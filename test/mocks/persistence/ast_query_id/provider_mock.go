// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/checkmarxDev/ast-sast-export/internal/persistence/ast_query_id (interfaces: QueryIDProvider)

// Package mock_persistence_ast_query_id is a generated GoMock package.
package mock_persistence_ast_query_id

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQueryIDProvider is a mock of QueryIDProvider interface.
type MockQueryIDProvider struct {
	ctrl     *gomock.Controller
	recorder *MockQueryIDProviderMockRecorder
}

// MockQueryIDProviderMockRecorder is the mock recorder for MockQueryIDProvider.
type MockQueryIDProviderMockRecorder struct {
	mock *MockQueryIDProvider
}

// NewMockQueryIDProvider creates a new mock instance.
func NewMockQueryIDProvider(ctrl *gomock.Controller) *MockQueryIDProvider {
	mock := &MockQueryIDProvider{ctrl: ctrl}
	mock.recorder = &MockQueryIDProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryIDProvider) EXPECT() *MockQueryIDProviderMockRecorder {
	return m.recorder
}

// GetQueryID mocks base method.
func (m *MockQueryIDProvider) GetQueryID(arg0, arg1, arg2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryID", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryID indicates an expected call of GetQueryID.
func (mr *MockQueryIDProviderMockRecorder) GetQueryID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryID", reflect.TypeOf((*MockQueryIDProvider)(nil).GetQueryID), arg0, arg1, arg2)
}
