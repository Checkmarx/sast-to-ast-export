// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/checkmarxDev/ast-sast-export/internal/integration/soap (interfaces: Adapter)
//
// Generated by this command:
//
//	mockgen -package mock_integration_soap -destination test/mocks/integration/soap/mock_adapter.go github.com/checkmarxDev/ast-sast-export/internal/integration/soap Adapter
//

// Package mock_integration_soap is a generated GoMock package.
package mock_integration_soap

import (
	reflect "reflect"

	soap "github.com/checkmarxDev/ast-sast-export/internal/integration/soap"
	gomock "go.uber.org/mock/gomock"
)

// MockAdapter is a mock of Adapter interface.
type MockAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockAdapterMockRecorder
}

// MockAdapterMockRecorder is the mock recorder for MockAdapter.
type MockAdapterMockRecorder struct {
	mock *MockAdapter
}

// NewMockAdapter creates a new mock instance.
func NewMockAdapter(ctrl *gomock.Controller) *MockAdapter {
	mock := &MockAdapter{ctrl: ctrl}
	mock.recorder = &MockAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdapter) EXPECT() *MockAdapterMockRecorder {
	return m.recorder
}

// GetCustomStateCollection mocks base method.
func (m *MockAdapter) GetCustomStateCollection() (*soap.GetResultStateListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomStateCollection")
	ret0, _ := ret[0].(*soap.GetResultStateListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomStateCollection indicates an expected call of GetCustomStateCollection.
func (mr *MockAdapterMockRecorder) GetCustomStateCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomStateCollection", reflect.TypeOf((*MockAdapter)(nil).GetCustomStateCollection))
}

// GetInstallationSettings mocks base method.
func (m *MockAdapter) GetInstallationSettings() (*soap.GetInstallationSettingsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallationSettings")
	ret0, _ := ret[0].(*soap.GetInstallationSettingsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallationSettings indicates an expected call of GetInstallationSettings.
func (mr *MockAdapterMockRecorder) GetInstallationSettings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallationSettings", reflect.TypeOf((*MockAdapter)(nil).GetInstallationSettings))
}

// GetPresetDetails mocks base method.
func (m *MockAdapter) GetPresetDetails(arg0 int) (*soap.GetPresetDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPresetDetails", arg0)
	ret0, _ := ret[0].(*soap.GetPresetDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPresetDetails indicates an expected call of GetPresetDetails.
func (mr *MockAdapterMockRecorder) GetPresetDetails(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPresetDetails", reflect.TypeOf((*MockAdapter)(nil).GetPresetDetails), arg0)
}

// GetQueryCollection mocks base method.
func (m *MockAdapter) GetQueryCollection() (*soap.GetQueryCollectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueryCollection")
	ret0, _ := ret[0].(*soap.GetQueryCollectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueryCollection indicates an expected call of GetQueryCollection.
func (mr *MockAdapterMockRecorder) GetQueryCollection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueryCollection", reflect.TypeOf((*MockAdapter)(nil).GetQueryCollection))
}

// GetResultPathsForQuery mocks base method.
func (m *MockAdapter) GetResultPathsForQuery(arg0, arg1 string) (*soap.GetResultPathsForQueryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResultPathsForQuery", arg0, arg1)
	ret0, _ := ret[0].(*soap.GetResultPathsForQueryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResultPathsForQuery indicates an expected call of GetResultPathsForQuery.
func (mr *MockAdapterMockRecorder) GetResultPathsForQuery(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResultPathsForQuery", reflect.TypeOf((*MockAdapter)(nil).GetResultPathsForQuery), arg0, arg1)
}

// GetSourcesByScanID mocks base method.
func (m *MockAdapter) GetSourcesByScanID(arg0 string, arg1 []string) (*soap.GetSourcesByScanIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourcesByScanID", arg0, arg1)
	ret0, _ := ret[0].(*soap.GetSourcesByScanIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourcesByScanID indicates an expected call of GetSourcesByScanID.
func (mr *MockAdapterMockRecorder) GetSourcesByScanID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourcesByScanID", reflect.TypeOf((*MockAdapter)(nil).GetSourcesByScanID), arg0, arg1)
}
